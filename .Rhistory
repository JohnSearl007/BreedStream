geom_hline(yintercept = mean_blups, linetype = "dashed", color = "black") +
labs(title = "Top 5 Stiff Stalk & Non-Stiff Stalk Populations by Median BLUP vs Families",
x = "Bi-parental Population",
y = "Yield BLUP") +
theme_minimal() +
theme(legend.position = "none") +
scale_x_discrete(guide = guide_axis(angle = 45))
ggsave("~/Documents/John_NAPB/SSViolin.pdf", height = 9.73, units = "in")
# Create the violin plot with custom x-axis order and horizontal line
ggplot(all_blups, aes(x = factor(Group, levels = x_order), y = Yield, fill = Group)) +
geom_violin() +
geom_hline(yintercept = mean_blups, linetype = "dashed", color = "black") +
labs(title = "Top 5 Stiff Stalk & Non-Stiff Stalk Populations by Median BLUP vs Families",
x = "Bi-parental Population",
y = "Yield BLUP") +
theme_minimal() +
theme(legend.position = "none") +
scale_x_discrete(guide = guide_axis(angle = 45))
mean_blups = mean(all_blups$Yield, na.rm = TRUE)
# Create the violin plot with custom x-axis order and horizontal line
ggplot(all_blups, aes(x = factor(Group, levels = x_order), y = Yield, fill = Group)) +
geom_violin() +
geom_hline(yintercept = mean_blups, linetype = "dashed", color = "black") +
labs(title = "Top 5 Stiff Stalk & Non-Stiff Stalk Populations by Median BLUP vs Families",
x = "Bi-parental Population",
y = "Yield BLUP") +
theme_minimal() +
theme(legend.position = "none") +
scale_x_discrete(guide = guide_axis(angle = 45))
# Create the violin plot with custom x-axis order and horizontal line
ggplot(all_blups, aes(x = factor(Group, levels = x_order), y = Yield, fill = Group)) +
geom_violin() +
geom_hline(yintercept = mean_blups, linetype = "dashed", color = "black") +
labs(title = "Top 5 Stiff Stalk & Non-Stiff Stalk Populations by Median BLUP vs All Families",
x = "Bi-parental Population",
y = "Yield BLUP") +
theme_minimal() +
theme(legend.position = "none") +
scale_x_discrete(guide = guide_axis(angle = 45))
ggsave("~/Documents/John_NAPB/SSViolin.pdf", height = 9.73, units = "in")
# Create the violin plot with custom x-axis order and horizontal line
ggplot(all_blups, aes(x = factor(Group, levels = x_order), y = Yield, fill = Group)) +
geom_violin() +
geom_hline(yintercept = mean_blups, linetype = "dashed", color = "black") +
scale_y_continuous(limits = c(100,300)) +
labs(title = "Top 5 Stiff Stalk & Non-Stiff Stalk Populations by Median BLUP vs All Families",
x = "Bi-parental Population",
y = "Yield BLUP") +
theme_minimal() +
theme(legend.position = "none") +
scale_x_discrete(guide = guide_axis(angle = 45))
# Create the violin plot with custom x-axis order and horizontal line
ggplot(all_blups, aes(x = factor(Group, levels = x_order), y = Yield, fill = Group)) +
geom_violin() +
geom_hline(yintercept = mean_blups, linetype = "dashed", color = "black") +
scale_y_continuous(limits = c(100,250)) +
labs(title = "Top 5 Stiff Stalk & Non-Stiff Stalk Populations by Median BLUP vs All Families",
x = "Bi-parental Population",
y = "Yield BLUP") +
theme_minimal() +
theme(legend.position = "none") +
scale_x_discrete(guide = guide_axis(angle = 45))
ggsave("~/Documents/John_NAPB/SSViolin.pdf", height = 9.73, units = "in")
# Create the violin plot with custom x-axis order and horizontal line
ggplot(all_blups, aes(x = factor(Group, levels = x_order), y = Yield, fill = Group)) +
geom_violin() +
geom_hline(yintercept = mean_blups, linetype = "dashed", color = "black") +
scale_y_continuous(limits = c(100,250)) +
labs(title = "Top 5 Stiff Stalk & Non-Stiff Stalk Populations by Median BLUP vs All Families",
x = "Bi-parental Population",
y = "Yield BLUP") +
theme_minimal() +
theme(legend.position = "none") +
scale_x_discrete(guide = guide_axis(angle = 45))
ggsave("~/Documents/John_NAPB/SSViolin.pdf", width = 10.5, height = 9.73, units = "in")
# Create the violin plot with custom x-axis order and horizontal line
ggplot(all_blups, aes(x = factor(Group, levels = x_order), y = Yield, fill = Group)) +
geom_violin() +
geom_hline(yintercept = mean_blups, linetype = "dashed", color = "black") +
scale_y_continuous(limits = c(100,250)) +
labs(title = "Top 5 Stiff Stalk & Non-Stiff Stalk Populations by Median BLUP vs All Families",
x = "Bi-parental Population",
y = "Yield BLUP") +
theme_minimal() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(guide = guide_axis(angle = 45))
ggsave("~/Documents/John_NAPB/SSViolin.pdf", width = 10.5, height = 9.73, units = "in")
# SS Table
blups = fread("~/Documents/John_Early100_Complete/Analysis/SS/SS_BLUPs.csv")
dkc = blups[blups$id %like% "DKC",]
dkc$`Y/M` = dkc$value.yield/dkc$value.moisture
top = blups
top$`Y/M` = top$value.yield/top$value.moisture
top = top[order(top$`Y/M`, decreasing = TRUE)]
top = top[!top$id %like% "DKC",]
top = top[1:10,]
top$id = paste0(top$id, " X PHP02")
top = rbind(top, dkc)
top = top[order(top$`Y/M`, decreasing = TRUE)]
top = top[,c("id", "value.yield", "value.moisture", "Y/M")]
colnames(top) = c("Hybrid", "Yield", "Moisture", "Y/M")
top[,2:4] = round(top[,2:4], 2)
knitr::kable(top)
# NSS Table
blups = fread("~/Documents/John_Early100_Complete/Analysis/NSS/NSS_BLUPs.csv")
dkc = blups[blups$id %like% "DKC",]
dkc$`Y/M` = dkc$value.yield/dkc$value.moisture
top = blups
top$`Y/M` = top$value.yield/top$value.moisture
top = top[order(top$`Y/M`, decreasing = TRUE)]
top = top[!top$id %like% "DKC",]
top = top[1:10,]
top$id = paste0(top$id, " X PHP02")
top = rbind(top, dkc)
top = top[order(top$`Y/M`, decreasing = TRUE)]
top = top[,c("id", "value.yield", "value.moisture", "Y/M")]
colnames(top) = c("Hybrid", "Yield", "Moisture", "Y/M")
top[,2:4] = round(top[,2:4], 2)
knitr::kable(top)
# OMA Table
oma = fread("~/Documents/BreedStream_App/Testing_Files/Results/SS_om.csv")
View(oma)
colnames(oma) = c("Parent 1", "Parent 2", "Optimal Mate Allocation")
oma$`Optimal Mate Allocation` = round(oma$`Optimal Mate Allocation`, 2)
sum(oma$`Optimal Mate Allocation`)
oma = oma[order(oma$`Optimal Mate Allocation`, decreasing = TRUE)]
# Ridgeline Plot
UWprop = fread("~/Documents/BreedStream_App/Testing_Files/Results/UW_Prop_Hybrids/HybridPredictions.csv")
View(UWprop)
load("~/Documents/John_NAPB/Poster.RData")
# Ridgeline plot with a vertical line for the mean of the "All" group
ggplot(combined_data, aes(x = value, y = group, fill = group)) +
geom_density_ridges(alpha = 0.5) +
geom_vline(xintercept = all_mean, color = "black", linetype = "dashed", linewidth = 1) +
labs(title = "Ridgeline Plot of Genomic Predictions",
x = "Centered GEGV Prediction",
y = "Group") +
theme_minimal() +
theme(legend.position = "none")
# Ridgeline plot with a vertical line for the mean of the "All" group
ggplot(combined_data, aes(x = value, y = group, fill = group)) +
geom_density_ridges(alpha = 0.5) +
geom_vline(xintercept = all_mean, color = "black", linetype = "solid", linewidth = 1) +
labs(title = "Ridgeline Plot of Genomic Predictions",
x = "Centered GEGV Prediction",
y = "Group") +
theme_minimal() +
theme(legend.position = "none")
all_sd = sd(combined_data[Group == "All", value], na.rm = TRUE)
all_sd = sd(combined_data[group == "All", value], na.rm = TRUE)
# Ridgeline plot with a vertical line for the mean of the "All" group
ggplot(combined_data, aes(x = value, y = group, fill = group)) +
geom_density_ridges(alpha = 0.5) +
geom_vline(xintercept = all_mean, color = "black", linetype = "solid", linewidth = 1) +
geom_vline(xintercept = all_mean + all_sd, color = "blue", linetype = "solid", linewidth = 1) +
labs(title = "Ridgeline Plot of Genomic Predictions",
x = "Centered GEGV Prediction",
y = "Group") +
theme_minimal() +
theme(legend.position = "none")
# Ridgeline plot with a vertical line for the mean of the "All" group
ggplot(combined_data, aes(x = value, y = group, fill = group)) +
geom_density_ridges(alpha = 0.5) +
geom_vline(xintercept = all_mean, color = "black", linetype = "solid", linewidth = 1) +
geom_vline(xintercept = all_mean + 0.5*all_sd, color = "blue", linetype = "solid", linewidth = 1) +
labs(title = "Ridgeline Plot of Genomic Predictions",
x = "Centered GEGV Prediction",
y = "Group") +
theme_minimal() +
theme(legend.position = "none")
ggsave("~/Documents/John_NAPB/Ridgeline.pdf", height = 10, width = 20.32, units = "in")
# Ridgeline plot with a vertical line for the mean of the "All" group
ggplot(combined_data, aes(x = value, y = group, fill = group)) +
geom_density_ridges(alpha = 0.5) +
geom_vline(xintercept = all_mean, color = "black", linetype = "solid", linewidth = 1) +
geom_vline(xintercept = all_mean + 0.5*all_sd, color = "blue", linetype = "solid", linewidth = 1) +
labs(title = "Centered Predictions of 'Top 5' Stiff Stalk Families Crossed with 'Top 5' Non-Stiff Stalk Families",
x = "Centered GEGV Prediction",
y = "Group") +
theme_minimal() +
theme(legend.position = "none")
# Ridgeline plot with a vertical line for the mean of the "All" group
ggplot(combined_data, aes(x = value, y = group, fill = group)) +
geom_density_ridges(alpha = 0.5) +
geom_vline(xintercept = all_mean, color = "black", linetype = "solid", linewidth = 1) +
geom_vline(xintercept = all_mean + 0.5*all_sd, color = "blue", linetype = "solid", linewidth = 1) +
labs(title = "Centered Predictions of 'Top 5' Stiff Stalk Families Crossed with 'Top 5' Non-Stiff Stalk Families",
x = "Centered GEGV Prediction",
y = "Group") +
theme_minimal() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5))
ggsave("~/Documents/John_NAPB/Ridgeline.pdf", height = 10, width = 20.32, units = "in")
# Top 10 Predicted Hybrids
top.preds = UWprop[UWprop$group == "All",]
top.preds = top.preds[order(top.preds$value, decreasing = TRUE)]
top.preds = top.preds[1:10,]
knitr::kable(top.preds)
top.preds$value = round(top.preds$value,2)
knitr::kable(top.preds)
View(UWprop)
Test <- readRDS("~/Documents/John_NAPB/Test.RDS")
as.matrix(Test@coeff)[1:5,1:5]
as.matrix(Test$coeff)[1:5,1:5]
View(Test)
coeff <- bigmemory::attach.big.matrix(Test$coeff)
coeff_chunk <- coeff[1:nrow(coeff), , drop = FALSE]
coeff_chunk[1:5,1:5]
10*19
95*2
2490/75
2490/90
95*2
190/3
190/4
190/5
2490/35
35*5
coeff_chunk <- readRDS("~/Documents/John_NAPB/coeff_chunk.RDS")
coeff.D_chunk <- readRDS("~/Documents/John_NAPB/coeff.D_chunk.RDS")
DM <- readRDS("~/Documents/John_NAPB/DM.RDS")
dom_effects <- readRDS("~/Documents/John_NAPB/dom_effects.RDS")
DV1 <- readRDS("~/Documents/John_NAPB/DV1.RDS")
effects.yield <- readRDS("~/Documents/John_NAPB/effects.yield.RDS")
GEGV1 <- readRDS("~/Documents/John_NAPB/GEGV1.RDS")
GEGV2 <- readRDS("~/Documents/John_NAPB/GEGV2.RDS")
value_chunk <- readRDS("~/Documents/John_NAPB/value_chunk.RDS")
pred_dom_chunk <- readRDS("~/Documents/John_NAPB/pred_dom_chunk.RDS")
pred_add_chunk <- readRDS("~/Documents/John_NAPB/pred_add_chunk.RDS")
N <- readRDS("~/Documents/John_NAPB/N.RDS")
M <- readRDS("~/Documents/John_NAPB/M.RDS")
id <- readRDS("~/Documents/John_NAPB/id.RDS")
dom_effects_vec <- readRDS("~/Documents/John_NAPB/dom_effects_vec.RDS")
add_effects_vec <- readRDS("~/Documents/John_NAPB/add_effects_vec.RDS")
prep.yield <- readRDS("~/Documents/John_NAPB/prep.yield.RDS")
output_chunk <- readRDS("~/Documents/John_NAPB/output_chunk.RDS")
model.yield <- readRDS("~/Documents/John_NAPB/model.yield.RDS")
marker.effects <- readRDS("~/Documents/John_NAPB/marker.effects.RDS")
genoH.B <- readRDS("~/Documents/John_NAPB/genoH.B.RDS")
genoH <- readRDS("~/Documents/John_NAPB/genoH.RDS")
GEGV2 <- readRDS("~/Documents/John_NAPB/GEGV2.RDS")
GEGV1 <- readRDS("~/Documents/John_NAPB/GEGV1.RDS")
effects.yield <- readRDS("~/Documents/John_NAPB/effects.yield.RDS")
DV1 <- readRDS("~/Documents/John_NAPB/DV1.RDS")
dom_effects <- readRDS("~/Documents/John_NAPB/dom_effects.RDS")
DM <- readRDS("~/Documents/John_NAPB/DM.RDS")
coeff.D_chunk <- readRDS("~/Documents/John_NAPB/coeff.D_chunk.RDS")
coeff_chunk <- readRDS("~/Documents/John_NAPB/coeff_chunk.RDS")
AV1 <- readRDS("~/Documents/John_NAPB/AV1.RDS")
ans.yield <- readRDS("~/Documents/John_NAPB/ans.yield.RDS")
add_effects <- readRDS("~/Documents/John_NAPB/add_effects.RDS")
save.image("~/Documents/John_NAPB/Poster_Testing.RData")
preds = fread("~/Documents/BreedStream_App/Testing_Files/Results/HybridPredictions.csv")
library(data.table)
preds = fread("~/Documents/BreedStream_App/Testing_Files/Results/HybridPredictions.csv")
View(preds)
colnames(preds) = c("id", "App")
library(dplyr)
test = left_join(GEGV1, preds)
test = na.omit(test)
View(test)
all.equal(test$value, test$App)
library(StageWise)
genoH = read_geno(filename = "~/Documents/BreedStream_App/Testing_Files/Results/insilicohybrids.csv",
ploidy = 2,
map = TRUE,
min.minor.allele = 1,
w = as.numeric(fread("~/Documents/BreedStream_App/Testing_Files/Results/optimal_weight.txt")),
ped = as.data.frame(fread("~/Documents/BreedStream_App/Testing_Files/PedData/Pedigree.csv")),
dominance = TRUE)
library(BreedStream)
library(BreedStream)
genoH.B = process_geno_matrix_transposed_columnwise(filename = "~/Documents/BreedStream_App/Testing_Files/Results/insilico_transposedhybrids.csv",
ploidy = 2,
dominance = TRUE,
min_minor_allele = 1)
coeff <- bigmemory::attach.big.matrix(genoH.B$coeff)
coeff.D <- bigmemory::attach.big.matrix(genoH.B$coeff.D)
id <- genoH.B$id
M <- ncol(coeff)
N <- nrow(coeff)
add_effects <- data.table::fread("~/Documents/BreedStream_App/Testing_Files/Results/add_effects.csv", select = c("marker", "effect"))
add_effects_vec <- add_effects$effect[1:min(nrow(add_effects), M)]
if (length(add_effects_vec) < M) add_effects_vec <- c(add_effects_vec, rep(0, M - length(add_effects_vec)))
dom_effects <- data.table::fread("~/Documents/BreedStream_App/Testing_Files/Results/dom_effects.csv", select = c("marker", "effect"))
dom_effects_vec <- dom_effects$effect[1:min(nrow(dom_effects), M)]
if (length(dom_effects_vec) < M) dom_effects_vec <- c(dom_effects_vec, rep(0, M - length(dom_effects_vec)))
coeff_chunk <- coeff[1:nrow(coeff), , drop = FALSE]
pred_add_chunk <- as.numeric(coeff_chunk %*% matrix(add_effects_vec, ncol = 1))
coeff.D_chunk <- coeff.D[1:nrow(coeff.D), , drop = FALSE]
pred_dom_chunk <- as.numeric(coeff.D_chunk %*% matrix(dom_effects_vec, ncol = 1))
value_chunk <- pred_add_chunk + pred_dom_chunk
output_chunk <- data.frame(id = id, value = value_chunk)
all.equal(as.matrix(genoH@coeff), as.matrix(bigmemory::attach.big.matrix(genoH.B$coeff)), tolerance = 1e-10, check.attributes = FALSE)
all.equal(as.matrix(genoH@coeff.D), as.matrix(bigmemory::attach.big.matrix(genoH.B$coeff.D)), tolerance = 1e-10, check.attributes = FALSE)
load("~/Documents/John_NAPB/Poster_Testing.RData")
preds = data.table::fread("~/Documents/BreedStream_App/Testing_Files/Results/HybridPredictions.csv")
colnames(preds) = c("id", "BreedStream")
comp = GEGV1
colnames(comp) = c("id", "StageWise")
comp = left_join(comp, preds)
all.equal(comp$StageWise, comp$BreedStream)
GEGV2 <- blup(data=prep.yield, geno=genoH, what="GV")
cor(comp$BreedStream, GEGV2$value, method = "spearman")
save.image("~/Documents/John_NAPB/Testing.RData")
ls
ls()
rm(coeff)
rm(coeff.D)
ls()
save.image("~/Documents/John_NAPB/Testing.RData")
load("~/Documents/John_NAPB/Poster.RData")
knitr::kable(top)
# Top 10 Predicted Hybrids
top.preds = preds
top.preds = top.preds[order(top.preds$BLUP, decreasing = TRUE)]
View(preds)
# Top 10 Predicted Hybrids
top.preds = preds
colnames(top.preds) = c("Hybrid", "Yield")
top.preds = top.preds[order(top.preds$Yield, decreasing = TRUE)]
# Top 10 Predicted Hybrids
top.preds = preds
colnames(top.preds) = c("Hybrid", "Yield")
top.preds = top.preds[order(top.preds$Yield, decreasing = TRUE)]
# Top 10 Predicted Hybrids
top.preds = as.data.frame(preds)
colnames(top.preds) = c("Hybrid", "Yield")
top.preds = top.preds[order(top.preds$Yield, decreasing = TRUE)]
top.preds = top.preds %>% rename("Hybrid" = "id")
library(data.table)
top.preds = top.preds %>% rename("Hybrid" = "id")
library(dplyr)
top.preds = top.preds %>% rename("Hybrid" = "id")
# Top 10 Predicted Hybrids
top.preds = preds
top.preds = top.preds %>% rename("Hybrid" = "id")
top.preds = top.preds %>% rename("Yield" = "Prediction")
top.preds = top.preds[order(top.preds$Yield, decreasing = TRUE)]
top.preds = top.preds[1:10,]
top.preds$Yield = round(top.preds$Yield,2)
knitr::kable(top.preds)
cor(comb$BLUP, comb$Prediction, method = "spearman")
library(BreedStream)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(reshape2)
library(ggcorrplot)
library(metan)
setwd("~/Documents/John_Early100_Complete/Analysis/SS")
load("StiffStalk_Final.RData")
df = fread("~/Documents/John_Early100_Complete/Analysis/SS/SS_Plots.csv")
# Calculate Environment Means for Each Trait
env_means = df %>%
group_by(env) %>%
summarize(yield_mean = mean(yield, na.rm = T),
moisture_mean = mean(moisture_percent, na.rm = T),
test_weight_mean = mean(test_weight_lb_bu, na.rm = T))
knitr::kable(env_means)
# Visualize Environment Means
df %>% pivot_longer(cols = c(yield, moisture_percent, test_weight_lb_bu),
names_to = "trait",
values_to = "value") %>%
ggplot(aes(x = env, y = value, fill = trait)) +
geom_boxplot() +
facet_wrap(~ trait, scales = "free_y") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Trait Distributions by Environment",
x = "Environment",
y = "Value")
ggsave("~/Documents/John_NAPB/SSRawPheno.pdf", width = 9.98, height = 8.14, units = "in")
# Visualize Environment Means
df %>% pivot_longer(cols = c(yield, moisture_percent, test_weight_lb_bu),
names_to = "trait",
values_to = "value") %>%
ggplot(aes(x = env, y = value, fill = trait)) +
geom_boxplot() +
facet_wrap(~ trait, scales = "free_y") +
theme_minimal() +
theme(plot.title = element_text(size = 20, hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14)) +
labs(title = "Trait Distributions by Environment",
x = "Environment",
y = "Value")
ggsave("~/Documents/John_NAPB/SSRawPheno.pdf", width = 9.98, height = 8.14, units = "in")
# Visualize Environment Means
trait_labels <- c(
moisture_percent = "Grain Moisture",
test_weight_lb_bu = "Test Weight",
yield = "Yield"
)
df %>%
pivot_longer(cols = c(yield, moisture_percent, test_weight_lb_bu),
names_to = "trait",
values_to = "value") %>%
ggplot(aes(x = env, y = value, fill = trait)) +
geom_boxplot() +
facet_wrap(~ trait, scales = "free_y", labeller = labeller(trait = trait_labels)) +
scale_fill_discrete(labels = trait_labels, name = "Trait") +
theme_minimal() +
theme(plot.title = element_text(size = 20, hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
strip.text = element_text(size = 14),  # Adjust facet label text size
legend.text = element_text(size = 12), # Adjust legend text size
legend.title = element_text(size = 14)) + # Adjust legend title size
labs(title = "Trait Distributions by Environment",
x = "Environment",
y = "Value")
ggsave("~/Documents/John_NAPB/SSRawPheno.pdf", width = 9.98, height = 8.14, units = "in")
ConvertToMap <- function(data) {
data %>%
mutate(Mb = Zm.B73.REFERENCE.NAM.5.0_start / 1000000) %>%
select(Mb, cM = Coordinate) %>%
filter(!is.na(Mb)) %>%
mutate(Mb = as.numeric(Mb)) %>%
arrange(Mb)
}
orig = ConvertToMap(read.delim("~/Documents/BreedStream_App/Testing_Files/B73_NAM_V5/chr1.txt", skip = 1))
library(dplyr)
orig = ConvertToMap(read.delim("~/Documents/BreedStream_App/Testing_Files/B73_NAM_V5/chr1.txt", skip = 1))
View(orig)
#'
#' @param data A data.frame containing physical and genetic position data, e.g., from a file like "https://maizegdb.org/map_text?id=1160762". If using a downloaded file directly, use ConvertToMap(read.delim("~/PATH/FILE.txt", skip = 1)).
#' @param physical_pos Character string specifying the column name for physical position (default: "Zm.B73.REFERENCE.NAM.5.0_start").
#' @param genetic_pos Character string specifying the column name for genetic position in centimorgans (default: "Coordinate").
#' @return A data.frame with columns `Mb` (physical position in megabases) and `cM` (genetic position in centimorgans).
#'
#' @importFrom dplyr %>% mutate select filter arrange
#' @importFrom rlang sym
#' @export
#'
ConvertToMap <- function(data, physical_pos = "Zm.B73.REFERENCE.NAM.5.0_start", genetic_pos = "Coordinate") {
# Validate inputs
if (!is.data.frame(data)) {
stop("`data` must be a data.frame")
}
if (!physical_pos %in% names(data)) {
stop("Column specified by `physical_pos` (", physical_pos, ") not found in data")
}
if (!genetic_pos %in% names(data)) {
stop("Column specified by `genetic_pos` (", genetic_pos, ") not found in data")
}
if (!is.numeric(data[[physical_pos]]) && !is.integer(data[[physical_pos]])) {
warning("`physical_pos` column (", physical_pos, ") is not numeric; attempting to convert")
}
# Convert character strings to symbols for dplyr
phys_col <- rlang::sym(physical_pos)
gen_col <- rlang::sym(genetic_pos)
# Process data
data %>%
mutate(Mb = !!phys_col / 1000000) %>%
select(Mb, cM = !!gen_col) %>%
filter(!is.na(Mb)) %>%
mutate(Mb = as.numeric(Mb)) %>%
arrange(Mb)
}
new = ConvertToMap(read.delim("~/Documents/BreedStream_App/Testing_Files/B73_NAM_V5/chr1.txt", skip = 1))
View(new)
setwd("~/Documents/BreedStream")
devtools::document()
roxygen2::roxygenize()
devtools::build()
devtools::install()
setwd("~/Documents/BreedStream_App")
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
runApp('App')
test = data.table::fread("~/Documents/BreedStream_App/Testing_Files/Results/Pheno.csv")
View(test)
test = data.table::fread("~/Documents/BreedStream_App/Testing_Files/Results/Pheno.csv")
str(test)
setwd("~/Documents/BreedStream")
devtools::document()
roxygen2::roxygenize()
devtools::build()
devtools::install()
shiny::runApp('~/Documents/BreedStream_App/App')
library(BreedStream)
test = data.table::fread("~/Documents/BreedStream_App/Testing_Files/Results/Pheno.csv")
View(test)
library(BreedStream)
BreedStream::Stage1_plots(filename = "~/Documents/BreedStream_App/Testing_Files/Results/Pheno.csv",
trait = c("yield"),
Fixed = c(),
Random = c("blocking"))
plots = Stage1_plots(filename = "~/Documents/BreedStream_App/Testing_Files/Results/Pheno.csv",
trait = c("yield"),
Fixed = c(),
Random = c("blocking"))
plots$boxplot
plots$qqplot
plots$heritability
plots$spatial
runApp('~/Documents/BreedStream_App/App')
runApp('~/Documents/BreedStream_App/App')
runApp('~/Documents/BreedStream_App/App')
runApp('~/Documents/BreedStream_App/App')
runApp('~/Documents/BreedStream_App/App')
runApp('~/Documents/BreedStream_App/App')
runApp('~/Documents/BreedStream_App/App')
runApp('~/Documents/BreedStream_App/App')
