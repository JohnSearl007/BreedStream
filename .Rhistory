females <- intersect(parents$id[parents$female], matings)
males <- intersect(parents$id[!parents$female], matings)
matings <- data.frame(expand.grid(female=females, male=males, stringsAsFactors=FALSE))
} else {
id2 <- intersect(matings, parents$id)
matings <- data.frame(expand.grid(female=id2, male=id2, stringsAsFactors=FALSE))
matings <- matings[matings$female >= matings$male,]
}
matings$female <- as.character(matings$female)
matings$male <- as.character(matings$male)
# Initialize result file with an empty data frame
empty_df <- data.table(female=character(), male=character(), merit=numeric())
if (dominance) {
empty_df[, `:=` (MPA=numeric(), MPD=numeric(), MPH=numeric())]
}
# Write the empty data frame to initialize the result file
fwrite(empty_df, file=result_file)
# Process matings in chunks
for (i in seq(1, nrow(matings), by=chunk_size)) {
mating_chunk <- matings[i:min(i + chunk_size - 1, nrow(matings)), ]
mating_chunk$merit <- (parents$add[match(mating_chunk$female, parents$id)] +
parents$add[match(mating_chunk$male, parents$id)])/2
if (dominance) {
mating_chunk$MPA <- mating_chunk$merit
mating_chunk$MPD <- (parents$dom[match(mating_chunk$female, parents$id)] +
parents$dom[match(mating_chunk$male, parents$id)])/2
# Parallel merit calculation
ans <- process_chunk_parallel(mating_chunk, ploidy, geno, effects, n.core)
mating_chunk$MPH <- as.numeric(crossprod(ans, effects[,2]))
if (standardize) {
mating_chunk$MPA <- mating_chunk$MPA / sd.merit
mating_chunk$MPD <- mating_chunk$MPD / sd.merit
mating_chunk$MPH <- mating_chunk$MPH / sd.merit
}
mating_chunk$merit <- mating_chunk$MPA + mating_chunk$MPD + mating_chunk$MPH
} else if (standardize) {
mating_chunk$merit <- mating_chunk$merit / sd.merit
}
# Append chunk results to the file
fwrite(mating_chunk, file=result_file, append=TRUE)
}
# Read and Format Matings
matings = fread(result_file, select = c("female", "male", "merit"))
colnames(matings) = c("parent1", "parent2", "merit")
# Return parents, K matrix, and matings
return(list(K=K, parents=parents[, setdiff(colnames(parents), c("add", "dom"))], matings=matings))
}
oma_reduced = function(dF = c(0.01,0.01), geno.file, kinship.file, ploidy = 2, selection.intensity = 0.10, solver="ECOS", dF.adapt = list(step = 0.005, max = 1)) {
stopifnot(length(dF) == 2L)
stopifnot(dF[1] <= dF[2])
ans1 = read_data_optimized(geno.file = geno.file,
kinship.file = kinship.file,
ploidy = ploidy,
matings = "all",
standardize = TRUE)
max.parent = ceiling(as.numeric(length(ans1$parents$id)) * selection.intensity)
ans2 = COMA::ocs(parents = data.frame(ans1$parents, min = 0, max = 1/max.parent),
ploidy = ploidy,
K = ans1$K,
dF = dF[2],
dF.adapt = dF.adapt,
solver = solver)
if (nrow(ans2$oc) == 0) {
stop("No solution possible.")
}
sel1 = ans2$oc$id[order(ans2$oc$value, decreasing = T)]
if (length(sel1) > max.parent)
sel1 = sel1[1:max.parent]
ans1 = read_data_optimized(geno.file = geno.file,
kinship.file = kinship.file,
ploidy = ploidy,
matings = sel1,
standardize = TRUE)
ans3 = COMA::oma(parents = data.frame(id = sel1, min = 0, max = 1),
matings = data.frame(ans1$matings, min = 0, max = 1),
ploidy = ploidy,
K = ans1$K,
dF = dF,
dF.adapt = dF.adapt,
solver = solver)
if (nrow(ans3$om) == 0) {
stop("No solution possible.")
}
return(ans3)
}
save.image(file = "Functions.RData")
getwd()
load("~/Documents/John_Early100_GBLUPs/Testing/OCS_OMA_Testing.RData")
load("~/Documents/John_Early100_GBLUPs/Testing/OCS_OMA_Testing.RData")
oma_reduced = function(dF = c(0.01,0.01), geno.file, kinship.file, ploidy = 2, selection.intensity = 1, solver="ECOS", dF.adapt = list(step = 0.005, max = 1), base = "RM") {
stopifnot(length(dF) == 2L)
stopifnot(dF[1] <= dF[2])
ans1 = read_data_optimized(geno.file = geno.file,
kinship.file = kinship.file,
ploidy = ploidy,
matings = "all",
standardize = TRUE)
max.parent = ceiling(as.numeric(length(ans1$parents$id)) * selection.intensity)
ans2 = COMA::ocs(parents = data.frame(ans1$parents, min = 0, max = 1/max.parent),
ploidy = ploidy,
K = ans1$K,
dF = dF[2],
dF.adapt = dF.adapt,
solver = solver,
base = base)
if (nrow(ans2$oc) == 0) {
stop("No solution possible.")
}
sel1 = ans2$oc$id[order(ans2$oc$value, decreasing = T)]
if (length(sel1) > max.parent)
sel1 = sel1[1:max.parent]
ans1 = read_data_optimized(geno.file = geno.file,
kinship.file = kinship.file,
ploidy = ploidy,
matings = sel1,
standardize = TRUE)
ans3 = COMA::oma(parents = data.frame(id = sel1, min = 0, max = 1),
matings = data.frame(ans1$matings, min = 0, max = 1),
ploidy = ploidy,
K = ans1$K,
dF = dF,
dF.adapt = dF.adapt,
solver = solver,
base = base)
if (nrow(ans3$om) == 0) {
stop("No solution possible.")
}
return(ans3)
}
oma_reduced = function(dF = c(0.01,0.01), geno.file, kinship.file, ploidy = 2, selection.intensity = 0.10, solver="ECOS", dF.adapt = list(step = 0.005, max = 1), base = "RM") {
stopifnot(length(dF) == 2L)
stopifnot(dF[1] <= dF[2])
ans1 = read_data_optimized(geno.file = geno.file,
kinship.file = kinship.file,
ploidy = ploidy,
matings = "all",
standardize = TRUE)
max.parent = ceiling(as.numeric(length(ans1$parents$id)) * selection.intensity)
ans2 = COMA::ocs(parents = data.frame(ans1$parents, min = 0, max = 1/max.parent),
ploidy = ploidy,
K = ans1$K,
dF = dF[2],
dF.adapt = dF.adapt,
solver = solver,
base = base)
if (nrow(ans2$oc) == 0) {
stop("No solution possible.")
}
sel1 = ans2$oc$id[order(ans2$oc$value, decreasing = T)]
if (length(sel1) > max.parent)
sel1 = sel1[1:max.parent]
ans1 = read_data_optimized(geno.file = geno.file,
kinship.file = kinship.file,
ploidy = ploidy,
matings = sel1,
standardize = TRUE)
ans3 = COMA::oma(parents = data.frame(id = sel1, min = 0, max = 1),
matings = data.frame(ans1$matings, min = 0, max = 1),
ploidy = ploidy,
K = ans1$K,
dF = dF,
dF.adapt = dF.adapt,
solver = solver,
base = base)
if (nrow(ans3$om) == 0) {
stop("No solution possible.")
}
return(ans3)
}
library(data.table)
library(dplyr)
library(tidyr)
library(janitor)
library(asreml)
library(StageWise)
library(future)
library(future.apply)
library(COMA)
library(AGHmatrix)
library(parallel)
library(CVXR)
geno.file = "~/Documents/John_Early100_GBLUPs/Testing/COMA_file_1.csv"
kinship.file = "~/Documents/John_Early100_GBLUPs/Testing/COMA_file_2.csv"
# dF = c(0.01,0.01) and dF.adapt = list(step = 0.005, max = 0.1)
result = oma_reduced(geno.file = geno.file, kinship.file = kinship.file, dF.adapt = list(step = 0.005, max = 0.1))
rm(result2, result3)
save.image(file = "OCS_OMA_Testing.RData")
crosses = result$om[!result$om$parent1 == result$om$parent2,]
View(crosses)
?oma
2000/15
crosses$induction = ceiling(crosses$value*induction.rows)
induction.rows = 150
crosses$induction = ceiling(crosses$value*induction.rows)
crosses = result$om[!result$om$parent1 == result$om$parent2,]
crosses = crosses[order(crosses$value, decreasing = T)]
crosses = crosses[order(crosses$value, decreasing = T),]
induction.rows = 150
crosses$induction = ceiling(crosses$value*induction.rows)
induction.rows = 150
crosses$induction = ceiling(crosses$value*induction.rows)
for (i in 1:nrow(crosses)) {
temp = crosses[1:i,]
if (sum(temp$induction) < induction.rows) {
i = i + 1
} else {
return(temp)
}
}
View(temp)
sum(temp$induction)
rm(temp)
induction.rows = 150
crosses$induction = ceiling(crosses$value*induction.rows)
for (i in 1:nrow(crosses)) {
temp = crosses[1:i,]
if (sum(temp$induction) < induction.rows) {
i = i + 1
} else {
crosses = temp
return(crosses)
}
}
View(crosses)
nursery_constraints = function(df, nursery.rows) {
df = df
df$nursery = ceiling(df$value*nursery.rows)
for (i in 1:nrow(df)) {
temp = df[1:i,]
if (sum(temp$nursery) < nursery.rows) {
i = i + 1
} else {
df = temp
return(df)
}
}
}
crosses = result$om[!result$om$parent1 == result$om$parent2,]
crosses = crosses[order(crosses$value, decreasing = T),]
crosses = nursery_constraints(df = crosses, nursery.rows = 150)
View(crosses)
rm(temp)
rm(induction.rows)
save.image(file = "OCS_OMA_Testing.RData")
View(crosses)
43560/2.5
9467-9240
227/10000
40/56*43560/(22.5*2.5*2)
25.74-(25.74*0.145)
setwd("~/Documents/BreedStream")
install.packages("usethis")
library(usethis)
create_package(".")
library(roxygen2)
roxygen2::roxygenise()
devtools::build()
devtools::install()
library(BreedStream)
## install if needed (do this exactly once):
## install.packages("usethis")
library(usethis)
use_git_config(user.name = "JohnSearl007", user.email = "jsearl007@gmail.com")
setwd("~/Documents/BreedStream")
setwd("~/Documents/John_Early100_GBLUPs/Testing")
setwd("~/Documents/John_Early100_GBLUPs/Testing")
library(BreedStream)
library(BreedStream)
design = head(fread("~/Documents/John_Early100_GBLUPs/Testing/ARL23DesignFile.csv"))
library(BreedStream)
design = head(fread("~/Documents/John_Early100_GBLUPs/Testing/ARL23DesignFile.csv"))
library(data.table)
getwd()
setwd("~/Documents/BreedStream")
devtools::build()
devtools::build()
devtools::install()
clear
library(BreedStream)
design = head(fread("~/Documents/John_Early100_GBLUPs/Testing/ARL23DesignFile.csv"))
combine = head(fread("~/Documents/John_Early100_GBLUPs/Testing/ARL23_clean.csv"))
geno = head(fread("~/Documents/John_Early100_GBLUPs/WISN24_Nursery_Work/Stiff Stalks/Early100_SS_GBLUP_Formatted.csv"))
pheno = head(fread("~/Documents/John_Early100_GBLUPs/Testing/Early100PhenoData.csv"))
ARL23 = fread("~/Documents/John_Early100_GBLUPs/Testing/Arlington 2023 John Trial.csv")
HAN23 = fread("~/Documents/John_Early100_GBLUPs/Testing/Hancock 2023 John Trial.csv")
MAR23 = fread("~/Documents/John_Early100_GBLUPs/Testing/Marshfield 2023 John Trial.csv")
ARL23.clean = outliers(data = ARL23, trait = c("Weight (lb)", "Moisture (%)", "Test Weight (lb/bu)"))
?outliers
ARL23.clean = outliers(data = ARL23, trait = c("Weight (lb)", "Moisture (%)", "Test Weight (lb/bu)"))
View(ARL23)
colnames(ARL23)
ARL23.clean = outliers(data = ARL23, trait = c("Weight (lb)", "Moisture (%)", "Test Weight (lb/bu)"))
devtools::build()
devtools::install()
library(BreedStream)
ARL23.clean = outliers(data = ARL23, trait = c("Weight (lb)", "Moisture (%)", "Test Weight (lb/bu)"))
devtools::build()
devtools::install()
setwd("~/Documents/BreedStream")
devtools::build()
devtools::install()
install.packages("devtools")
devtools::install_github("jendelman/StageWise", build_vignettes=FALSE)
install.packages("devtools")
setwd("~/Documents/BreedStream")
devtools::build()
devtools::install()
library(BreedStream)
?harvest.master
design = head(fread("~/Documents/John_Early100_GBLUPs/Testing/ARL23DesignFile.csv"))
library(data.table)
design = head(fread("~/Documents/John_Early100_GBLUPs/Testing/ARL23DesignFile.csv"))
combine = head(fread("~/Documents/John_Early100_GBLUPs/Testing/ARL23_clean.csv"))
geno = head(fread("~/Documents/John_Early100_GBLUPs/WISN24_Nursery_Work/Stiff Stalks/Early100_SS_GBLUP_Formatted.csv"))
pheno = head(fread("~/Documents/John_Early100_GBLUPs/Testing/Early100PhenoData.csv"))
ARL23 = fread("~/Documents/John_Early100_GBLUPs/Testing/Arlington 2023 John Trial.csv")
HAN23 = fread("~/Documents/John_Early100_GBLUPs/Testing/Hancock 2023 John Trial.csv")
MAR23 = fread("~/Documents/John_Early100_GBLUPs/Testing/Marshfield 2023 John Trial.csv")
ARL23.clean = outliers(data = ARL23, trait = c("Weight (lb)", "Moisture (%)", "Test Weight (lb/bu)"))
ARL23.clean = outliers(data = ARL23, trait = c("Weight (lb)", "Moisture (%)", "Test Weight (lb/bu)"))
setwd("~/Documents/BreedStream")
setwd("~/Documents/BreedStream")
library(roxygen2)
roxygen2::roxygenise()
devtools::build()
devtools::install()
library(BreedStream)
library(data.table)
library(dplyr)
library(tidyr)
library(janitor)
library(asreml)
library(StageWise)
library(future)
library(future.apply)
library(COMA)
library(AGHmatrix)
library(parallel)
library(CVXR)
?read_geno
?blup
Amatrix()
?Amatrix()
?max
base::max(1,2)
?expand.grid
?options
?future.globals.maxSize
?future::future.globals.maxSize
?on.exit
?future.options
?Stage1
?seq
?which.min
?paste0
?setdiff
setdiff(c(1,2,3), c(1))
?length
?append
?seq_along
?intersect
?Map
?gsub
?unite
?tidyr::unite
?pull
?ceiling
?cumsum
?min
?which
?order
?subset
?select
?melt
?filter
?distinct
?transmute
?split
?makeCluster
?clusterExport
?parSapply
?stopCluster
?read.csv
?kronecker
?intersect
?fwrite
import = c(
StageWise::read_geno,
StageWise::blup,
dplyr::rename,
dplyr::left_join,
dplyr::select,
dplyr::any_of,
data.table::fread,
utils::write.csv,
AGHmatrix::Amatrix,
future::future.globals.maxSize,
future::plan,
future::multisession,
asreml::asreml.options,
StageWise::Stage1,
StageWise::Stage2,
future.apply::future_lapply,
utils::write.table,
StageWise::blup_prep,
dplyr::mutate,
dplyr::setdiff,
data.table::setDT,
data.table::set,
janitor::clean_names,
dplyr::intersect,
dplyr::rename_with,
dplyr::matches,
tidyr::unite,
dplyr::pull,
dplyr::all_of,
base::cumsum,
base::min,
reshape2::melt,
dplyr::filter,
dplyr::distinct,
dplyr::transmute,
parallel::makeCluster,
parallel::clusterExport,
parallel::parSapply,
parallel::stopCluster,
utils::read.csv,
data.table::fwrite
)
?future::future.globals.maxSize
import = c(
"StageWise::read_geno",
"StageWise::blup",
"dplyr::rename",
"dplyr::left_join",
"dplyr::select",
"dplyr::any_of",
"data.table::fread",
"utils::write.csv",
"AGHmatrix::Amatrix",
"future::plan",
"future::multisession",
"asreml::asreml.options",
"StageWise::Stage1",
"StageWise::Stage2",
"future.apply::future_lapply",
"utils::write.table",
"StageWise::blup_prep",
"dplyr::mutate",
"dplyr::setdiff",
"data.table::setDT",
"data.table::set",
"janitor::clean_names",
"dplyr::intersect",
"dplyr::rename_with",
"dplyr::matches",
"tidyr::unite",
"dplyr::pull",
"dplyr::all_of",
"reshape2::melt",
"dplyr::filter",
"dplyr::distinct",
"dplyr::transmute",
"parallel::makeCluster",
"parallel::clusterExport",
"parallel::parSapply",
"parallel::stopCluster",
"utils::read.csv",
"data.table::fwrite"
)
import = import[order(import)]
import
import2 = paste0("importFrom(",import,"\\)")
import2
import2 = paste0("importFrom(",import,")")
import2
import2 = gsub('"',"",import2)
import2
import2 = gsub('\\"',"",import2)
import2
import2 = gsub('::',", ",import2)
import2
write.table(import2, file = "TEMP.txt", quote = F, row.names = F, col.names = F)
usethis::use_import_from()
?usethis::use_import_from()
usethis::use_import_from(AGHmatrix, Amatrix)
devtools::build()
devtools::install()
roxygen2::roxygenise()
setwd("~/Documents/BreedStream")
roxygen2::roxygenise()
devtools::build()
devtools::install()
library(BreedStream)
library(BreedStream)
design = head(fread("~/Documents/John_Early100_GBLUPs/Testing/ARL23DesignFile.csv"))
design = head(data.table::fread("~/Documents/John_Early100_GBLUPs/Testing/ARL23DesignFile.csv"))
combine = head(data.table::fread("~/Documents/John_Early100_GBLUPs/Testing/ARL23_clean.csv"))
geno = head(data.table::fread("~/Documents/John_Early100_GBLUPs/WISN24_Nursery_Work/Stiff Stalks/Early100_SS_GBLUP_Formatted.csv"))
pheno = head(data.table::fread("~/Documents/John_Early100_GBLUPs/Testing/Early100PhenoData.csv"))
ARL23 = data.table::fread("~/Documents/John_Early100_GBLUPs/Testing/Arlington 2023 John Trial.csv")
HAN23 = data.table::fread("~/Documents/John_Early100_GBLUPs/Testing/Hancock 2023 John Trial.csv")
MAR23 = data.table::fread("~/Documents/John_Early100_GBLUPs/Testing/Marshfield 2023 John Trial.csv")
ARL23.clean = outliers(data = ARL23, trait = c("Weight (lb)", "Moisture (%)", "Test Weight (lb/bu)"))
?%>%
roxygen2::roxygenise()
devtools::build()
devtools::install()
library(BreedStream)
ARL23.clean = outliers(data = ARL23, trait = c("Weight (lb)", "Moisture (%)", "Test Weight (lb/bu)"))
ARL23.clean = outliers(data = ARL23, trait = c("Weight (lb)", "Moisture (%)", "Test Weight (lb/bu)"))
rlang::last_trace()
