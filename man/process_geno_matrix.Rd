% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process_geno_matrix.R
\name{process_geno_matrix}
\alias{process_geno_matrix}
\title{Process Genotype Data into Centered Coefficient Matrices}
\usage{
process_geno_matrix(
  filename,
  ploidy,
  map = FALSE,
  dominance = FALSE,
  chunk_size = 125000,
  min_minor_allele = 5
)
}
\arguments{
\item{filename}{Character string specifying the path to the CSV file containing
genotype data (markers as rows, individuals as columns). The file must include
a header with at least one column for markers and one or more for genotypes.
If \code{map = TRUE}, it must include columns for marker, chromosome, and position.}

\item{ploidy}{Integer specifying the ploidy level (e.g., 2 for diploid, 4 for tetraploid).
Must be a positive even number.}

\item{map}{Logical indicating whether the CSV includes map information (columns for
marker, chromosome, and position). If \code{TRUE}, the first three columns are
assumed to be marker, chromosome, and position, with genotypes starting from the
fourth column. If \code{FALSE}, the first column is markers, and genotypes start
from the second column. Defaults to \code{FALSE}.}

\item{dominance}{Logical indicating whether to compute dominance coefficients in
addition to additive coefficients. If \code{TRUE}, a second \code{big.matrix} is
created for dominance effects. Defaults to \code{FALSE}.}

\item{chunk_size}{Integer specifying the number of individuals to process in each chunk
after transposition. Adjust this to balance memory usage and performance. Defaults to 125000.}

\item{min_minor_allele}{Integer specifying the minimum number of individuals carrying
the minor allele required for a marker to be retained after filtering. Defaults to 5.}
}
\value{
A list containing:
\itemize{
\item \code{coeff}: A \code{big.matrix.descriptor} pointing to the disk-based
matrix of centered genotype coefficients (rows = individuals, columns = markers).
\item \code{coeff.D}: A \code{big.matrix.descriptor} for dominance coefficients
(only included if \code{dominance = TRUE}).
\item \code{id}: A character vector of individual IDs.
\item \code{markers}: A character vector of kept marker names.
\item \code{map}: A data.table with columns \code{marker}, \code{chr}, \code{pos}
(only included if \code{map = TRUE}).
}
}
\description{
Reads genotype data from a CSV file (markers as rows, individuals as columns),
internally transposes it to individuals as rows and markers as columns using
disk-based operations, filters markers based on minor allele count, centers
genotypes around mean allele frequencies, and optionally computes dominance
coefficients. Results are stored in disk-based \code{big.matrix} objects.
Chunks are processed in parallel across multiple cores for efficiency.
}
\details{
The function internally transposes the input CSV (markers as rows, individuals as columns)
to a temporary file (individuals as rows, markers as columns) using a Bash script
with csvtool to avoid loading the entire dataset into memory. It assumes marker names
are unique to prevent errors during transposition or processing. It then processes the
transposed data in two passes, parallelizing chunks across multiple CPU cores:
\enumerate{
\item \strong{First pass}: Reads the transposed CSV in chunks of individuals to compute
per-marker statistics (sum, count, minor allele counts) and filters markers based
on \code{min_minor_allele}.
\item \strong{Second pass}: Reads the transposed CSV again to compute centered genotype
coefficients (and dominance coefficients if requested) for kept markers, storing
results in disk-based \code{big.matrix} objects.
}
Genotypes are centered by subtracting \code{ploidy * p2}, where \code{p2} is the mean
genotype divided by ploidy. Missing values are imputed with the marker's mean genotype.
Dominance coefficients are computed as:
\code{-2 * choose(ploidy, 2) * p^2 + 2 * (ploidy - 1) * p * geno - geno * (geno - 1)}.
}
\examples{
\dontrun{
# Example with a diploid dataset
result <- process_geno_matrix(
  filename = "genotypes.csv",
  ploidy = 2,
  map = TRUE,
  dominance = TRUE,
  chunk_size = 5000,
  min_minor_allele = 10
)
print(result$id)
print(result$map)
}

}
